namespace se
{
std::vector<component>* get component(SEint index)
{
	return &priv::m_engine.GetDummySystem()->container.at(index);
}

namespace priv
{
DummySystem::DummySystem(Engine& engine_ref)
	: ComponentSystem(engine_ref)
	, init containers
{
	//THIS IS VERY IMPORTANT:
	//This links components to correct systems and to correct typeid! Must be done in every new system for all components it handles
	Engine::ComponentTypeToSystemPtr.emplace(component types, this);
}

DummySystem::~DummySystem()
{

}

void DummySystem::Initialize()
{

}

void DummySystem::Uninitialize()
{

}

void DummySystem::Update(SEfloat deltaTime)
{

}

void DummySystem::ClearComponentContainers()
{
	clear containers
}

void DummySystem::OnEntityAdded(Entity& entity, Dataformat_itr& entity_obj)
{
	if (entity.components.count(component type)
	{
		_onEntityAdded_helper(entity, COMPONENT_TYPE::type, entity_obj, container, free indice container);
	}
}

void DummySystem::OnEntityRemoved(Entity& entity)
{
	if (entity.components.count(component type)
	{
		free indices container.push(entity.components.at(component type);
	}
}

SEint DummySystem::CreateComponent(Entity& entity, COMPONENT_TYPE component_type, Dataformat_itr& entity_obj)
{
	if (component_type == component type)
	{
		return _createComponent_helper<type>(entity, component_type, entity_obj, container, free indices container);
	}
	else
	{
		MessageWarning( id ) << "Somehow tried to add component that doesn't belong to this system!!\n Check that correct system takes responsibility!!";
		return -1;
	}
}

void DummySystem::RemoveComponent(Entity& entity, COMPONENT_TYPE component_type, Dataformat_itr& entity_obj)
{
	if (component_type == component type)
	{
		free indices container.push(_removeComponent_helper(entity, component_type, entity_obj, container));
	}
	else
	{
		MessageWarning( id ) << "Somehow tried to remove component that doesn't belong to this system!!\n Check that correct system takes responsibility!!";
		return;
	}
}

Component* DummySystem::GetPlainComponentPtr(COMPONENT_TYPE type, SEint index_in_container)
{
	if (type == component type)
	{
		return &container.at(index_in_container);
	}
	else
		return nullptr;
}

}//namespace priv
}//namespace se