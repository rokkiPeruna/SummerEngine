#root/engine

#Add include directories
include_directories(${PROJECT_SOURCE_DIR}/engine/include)
include_directories(${PROJECT_SOURCE_DIR}/engine/src)
include_directories(${PROJECT_SOURCE_DIR}/external)
include_directories(${PROJECT_SOURCE_DIR}/external/OpenGL)
include_directories(${PROJECT_SOURCE_DIR}/libs)

#Add library directories
link_directories(${PROJECT_SOURCE_DIR}/libs)


#-----------------------------------------------------------------
#Components
set(COMPONENTS_FILES
	include/components/Component.h
	src/components/Component.cpp
	include/components/NullComponent.h
	src/components/NullComponent.cpp
	include/components/CPosition.h
	include/components/CVelocity.h
	)
source_group("components" FILES ${COMPONENTS_FILES})
#-----------------------------------------------------------------
#Systems
set(SYSTEMS_FILES
	include/systems/ComponentSystem.h
	src/systems/ComponentSystem.cpp
	include/systems/TransformSystem.h
	src/systems/TransformSystem.cpp
	include/systems/MovementSystem.h
	src/systems/MovementSystem.cpp
	src/systems/MovementSystemUiImpl.cpp
	)
source_group("systems" FILES ${SYSTEMS_FILES})
#-----------------------------------------------------------------
#Managers
set(MANAGERS_FILES
	include/managers/ResourceManager.h
	src/managers/ResourceManager.cpp
	include/managers/Resource.h
	include/managers/EntityComponentManager.h
	src/managers/EntityComponentManager.cpp
	include/managers/Entity.h
	src/managers/Entity.cpp)
source_group("managers" FILES ${MANAGERS_FILES})
#-----------------------------------------------------------------
#Core
set(CORE_FILES
	include/core/Engine.h
	src/core/Engine.cpp
	include/core/Window.h
	src/core/Window.cpp	
	include/core/Graphics.h
	src/core/Graphics.cpp
	include/core/Dictionaries.h
	src/core/Dictionaries.cpp
	)
source_group("core" FILES ${CORE_FILES})
#-----------------------------------------------------------------
#Utility
set(UTILITY_FILES
	include/utility/Typedefs.h
	include/utility/Time.h
	src/utility/Time.cpp
	include/utility/Clock.h
	src/utility/Clock.cpp
	include/utility/Math.h
	)
source_group("utility" FILES ${UTILITY_FILES})
#-----------------------------------------------------------------
#User
set(USER_FILES
	include/user/ComponentList.h
	)
source_group("user" FILES ${USER_FILES})
#-----------------------------------------------------------------
#Main.cpp
set(MAIN_CPP
	src/main.cpp
	)
source_group("" FILES ${MAIN_CPP})
#-----------------------------------------------------------------

#JSON files
set(JSON_COMPONENT_TEMPLATES
	json_files/component_templates.json)
	
set(JSON_ENTITY_TEMPLATES
	json_files/entity_templates.json)

set(JSON_SCENES
	json_files/scenes.json)
	
set(JSON_FILES
	${JSON_COMPONENT_TEMPLATES}
	${JSON_ENTITY_TEMPLATES}
	${JSON_SCENES})
	
source_group("json" FILES
	${JSON_FILES})
#-----------------------------------------------------------------

#Project name
add_executable(engine
	src/main.cpp
	${COMPONENTS_FILES}
	${SYSTEMS_FILES}
	${MANAGERS_FILES}
	${CORE_FILES}
	${UTILITY_FILES}
	${USER_FILES}
	${MAIN_CPP}
	${JSON_FILES}
	)

#Link libraries
#link_libraries(
#			   libEGL 
#			   libGLESv2			   
#				glew32 
#				glew32s 
#)
#					libEGL 
#					libGLESv2 
target_link_libraries(engine PUBLIC 
					box2d 
					SDL2-static 
					SDL2main 
					glew32 
					glew32s 	
					OpenGL32
				)
# Remember to add 'OALWrapper' to target_link_libraries

#Add folder for exes
set_property(TARGET engine PROPERTY FOLDER "engine")

# Properties->General->Output Directory
set_target_properties(engine PROPERTIES
                      RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/executables)
